// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Borrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Borrow entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Borrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Borrow", id.toString(), this);
  }

  static load(id: string): Borrow | null {
    return store.get("Borrow", id) as Borrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get onBehalfOf(): Bytes {
    let value = this.get("onBehalfOf");
    return value.toBytes();
  }

  set onBehalfOf(value: Bytes) {
    this.set("onBehalfOf", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get borrowRateMode(): BigInt {
    let value = this.get("borrowRateMode");
    return value.toBigInt();
  }

  set borrowRateMode(value: BigInt) {
    this.set("borrowRateMode", Value.fromBigInt(value));
  }

  get borrowRate(): BigInt {
    let value = this.get("borrowRate");
    return value.toBigInt();
  }

  set borrowRate(value: BigInt) {
    this.set("borrowRate", Value.fromBigInt(value));
  }

  get referral(): i32 {
    let value = this.get("referral");
    return value.toI32();
  }

  set referral(value: i32) {
    this.set("referral", Value.fromI32(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Deposit entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Deposit entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Deposit", id.toString(), this);
  }

  static load(id: string): Deposit | null {
    return store.get("Deposit", id) as Deposit | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get onBehalfOf(): Bytes {
    let value = this.get("onBehalfOf");
    return value.toBytes();
  }

  set onBehalfOf(value: Bytes) {
    this.set("onBehalfOf", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get referral(): i32 {
    let value = this.get("referral");
    return value.toI32();
  }

  set referral(value: i32) {
    this.set("referral", Value.fromI32(value));
  }
}

export class FlashLoan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FlashLoan entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FlashLoan entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FlashLoan", id.toString(), this);
  }

  static load(id: string): FlashLoan | null {
    return store.get("FlashLoan", id) as FlashLoan | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    return value.toBytes();
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get initiator(): Bytes {
    let value = this.get("initiator");
    return value.toBytes();
  }

  set initiator(value: Bytes) {
    this.set("initiator", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get premium(): BigInt {
    let value = this.get("premium");
    return value.toBigInt();
  }

  set premium(value: BigInt) {
    this.set("premium", Value.fromBigInt(value));
  }

  get referralCode(): i32 {
    let value = this.get("referralCode");
    return value.toI32();
  }

  set referralCode(value: i32) {
    this.set("referralCode", Value.fromI32(value));
  }
}

export class Repay extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Repay entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Repay entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Repay", id.toString(), this);
  }

  static load(id: string): Repay | null {
    return store.get("Repay", id) as Repay | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get repayer(): Bytes {
    let value = this.get("repayer");
    return value.toBytes();
  }

  set repayer(value: Bytes) {
    this.set("repayer", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class Swap extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Swap entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Swap entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Swap", id.toString(), this);
  }

  static load(id: string): Swap | null {
    return store.get("Swap", id) as Swap | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get rateMode(): BigInt {
    let value = this.get("rateMode");
    return value.toBigInt();
  }

  set rateMode(value: BigInt) {
    this.set("rateMode", Value.fromBigInt(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Withdraw entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Withdraw entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Withdraw", id.toString(), this);
  }

  static load(id: string): Withdraw | null {
    return store.get("Withdraw", id) as Withdraw | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get reserve(): Bytes {
    let value = this.get("reserve");
    return value.toBytes();
  }

  set reserve(value: Bytes) {
    this.set("reserve", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class BorrowAllowanceDelegated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save BorrowAllowanceDelegated entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BorrowAllowanceDelegated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BorrowAllowanceDelegated", id.toString(), this);
  }

  static load(id: string): BorrowAllowanceDelegated | null {
    return store.get(
      "BorrowAllowanceDelegated",
      id
    ) as BorrowAllowanceDelegated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txHash(): Bytes | null {
    let value = this.get("txHash");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set txHash(value: Bytes | null) {
    if (value === null) {
      this.unset("txHash");
    } else {
      this.set("txHash", Value.fromBytes(value as Bytes));
    }
  }

  get fromAddress(): Bytes | null {
    let value = this.get("fromAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("fromAddress");
    } else {
      this.set("fromAddress", Value.fromBytes(value as Bytes));
    }
  }

  get toAddress(): Bytes | null {
    let value = this.get("toAddress");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toAddress(value: Bytes | null) {
    if (value === null) {
      this.unset("toAddress");
    } else {
      this.set("toAddress", Value.fromBytes(value as Bytes));
    }
  }

  get valueTransferred(): BigInt | null {
    let value = this.get("valueTransferred");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set valueTransferred(value: BigInt | null) {
    if (value === null) {
      this.unset("valueTransferred");
    } else {
      this.set("valueTransferred", Value.fromBigInt(value as BigInt));
    }
  }

  get gasUsed(): BigInt | null {
    let value = this.get("gasUsed");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt | null) {
    if (value === null) {
      this.unset("gasUsed");
    } else {
      this.set("gasUsed", Value.fromBigInt(value as BigInt));
    }
  }

  get gasPrice(): BigInt | null {
    let value = this.get("gasPrice");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("gasPrice");
    } else {
      this.set("gasPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get fromUser(): Bytes {
    let value = this.get("fromUser");
    return value.toBytes();
  }

  set fromUser(value: Bytes) {
    this.set("fromUser", Value.fromBytes(value));
  }

  get toUser(): Bytes {
    let value = this.get("toUser");
    return value.toBytes();
  }

  set toUser(value: Bytes) {
    this.set("toUser", Value.fromBytes(value));
  }

  get asset(): Bytes {
    let value = this.get("asset");
    return value.toBytes();
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }
}

export class AToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AToken", id.toString(), this);
  }

  static load(id: string): AToken | null {
    return store.get("AToken", id) as AToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlyingAssetAddress(): Bytes {
    let value = this.get("underlyingAssetAddress");
    return value.toBytes();
  }

  set underlyingAssetAddress(value: Bytes) {
    this.set("underlyingAssetAddress", Value.fromBytes(value));
  }

  get underlyingAssetDecimals(): i32 {
    let value = this.get("underlyingAssetDecimals");
    return value.toI32();
  }

  set underlyingAssetDecimals(value: i32) {
    this.set("underlyingAssetDecimals", Value.fromI32(value));
  }
}

export class UserReserve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UserReserve entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UserReserve entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UserReserve", id.toString(), this);
  }

  static load(id: string): UserReserve | null {
    return store.get("UserReserve", id) as UserReserve | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get scaledATokenBalance(): BigInt {
    let value = this.get("scaledATokenBalance");
    return value.toBigInt();
  }

  set scaledATokenBalance(value: BigInt) {
    this.set("scaledATokenBalance", Value.fromBigInt(value));
  }

  get currentATokenBalance(): BigInt {
    let value = this.get("currentATokenBalance");
    return value.toBigInt();
  }

  set currentATokenBalance(value: BigInt) {
    this.set("currentATokenBalance", Value.fromBigInt(value));
  }

  get scaledVariableDebt(): BigInt {
    let value = this.get("scaledVariableDebt");
    return value.toBigInt();
  }

  set scaledVariableDebt(value: BigInt) {
    this.set("scaledVariableDebt", Value.fromBigInt(value));
  }

  get currentVariableDebt(): BigInt {
    let value = this.get("currentVariableDebt");
    return value.toBigInt();
  }

  set currentVariableDebt(value: BigInt) {
    this.set("currentVariableDebt", Value.fromBigInt(value));
  }

  get principalStableDebt(): BigInt {
    let value = this.get("principalStableDebt");
    return value.toBigInt();
  }

  set principalStableDebt(value: BigInt) {
    this.set("principalStableDebt", Value.fromBigInt(value));
  }

  get currentStableDebt(): BigInt {
    let value = this.get("currentStableDebt");
    return value.toBigInt();
  }

  set currentStableDebt(value: BigInt) {
    this.set("currentStableDebt", Value.fromBigInt(value));
  }

  get currentTotalDebt(): BigInt {
    let value = this.get("currentTotalDebt");
    return value.toBigInt();
  }

  set currentTotalDebt(value: BigInt) {
    this.set("currentTotalDebt", Value.fromBigInt(value));
  }

  get liquidityRate(): BigInt {
    let value = this.get("liquidityRate");
    return value.toBigInt();
  }

  set liquidityRate(value: BigInt) {
    this.set("liquidityRate", Value.fromBigInt(value));
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    return value.toI32();
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get usageAsCollateralEnabled(): boolean {
    let value = this.get("usageAsCollateralEnabled");
    return value.toBoolean();
  }

  set usageAsCollateralEnabled(value: boolean) {
    this.set("usageAsCollateralEnabled", Value.fromBoolean(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get reserves(): Array<string> {
    let value = this.get("reserves");
    return value.toStringArray();
  }

  set reserves(value: Array<string>) {
    this.set("reserves", Value.fromStringArray(value));
  }
}

export class Reserve extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Reserve entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Reserve entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Reserve", id.toString(), this);
  }

  static load(id: string): Reserve | null {
    return store.get("Reserve", id) as Reserve | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlyingAsset(): Bytes {
    let value = this.get("underlyingAsset");
    return value.toBytes();
  }

  set underlyingAsset(value: Bytes) {
    this.set("underlyingAsset", Value.fromBytes(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get decimals(): i32 {
    let value = this.get("decimals");
    return value.toI32();
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }

  get reserveLiquidationThreshold(): BigInt {
    let value = this.get("reserveLiquidationThreshold");
    return value.toBigInt();
  }

  set reserveLiquidationThreshold(value: BigInt) {
    this.set("reserveLiquidationThreshold", Value.fromBigInt(value));
  }

  get reserveLiquidationBonus(): BigInt {
    let value = this.get("reserveLiquidationBonus");
    return value.toBigInt();
  }

  set reserveLiquidationBonus(value: BigInt) {
    this.set("reserveLiquidationBonus", Value.fromBigInt(value));
  }

  get totalATokenSupply(): BigInt {
    let value = this.get("totalATokenSupply");
    return value.toBigInt();
  }

  set totalATokenSupply(value: BigInt) {
    this.set("totalATokenSupply", Value.fromBigInt(value));
  }

  get totalPrincipalStableDebt(): BigInt {
    let value = this.get("totalPrincipalStableDebt");
    return value.toBigInt();
  }

  set totalPrincipalStableDebt(value: BigInt) {
    this.set("totalPrincipalStableDebt", Value.fromBigInt(value));
  }

  get totalScaledVariableDebt(): BigInt {
    let value = this.get("totalScaledVariableDebt");
    return value.toBigInt();
  }

  set totalScaledVariableDebt(value: BigInt) {
    this.set("totalScaledVariableDebt", Value.fromBigInt(value));
  }

  get totalCurrentVariableDebt(): BigInt {
    let value = this.get("totalCurrentVariableDebt");
    return value.toBigInt();
  }

  set totalCurrentVariableDebt(value: BigInt) {
    this.set("totalCurrentVariableDebt", Value.fromBigInt(value));
  }

  get totalDeposits(): BigInt {
    let value = this.get("totalDeposits");
    return value.toBigInt();
  }

  set totalDeposits(value: BigInt) {
    this.set("totalDeposits", Value.fromBigInt(value));
  }

  get lastUpdateTimestamp(): i32 {
    let value = this.get("lastUpdateTimestamp");
    return value.toI32();
  }

  set lastUpdateTimestamp(value: i32) {
    this.set("lastUpdateTimestamp", Value.fromI32(value));
  }

  get liquidityRate(): BigInt {
    let value = this.get("liquidityRate");
    return value.toBigInt();
  }

  set liquidityRate(value: BigInt) {
    this.set("liquidityRate", Value.fromBigInt(value));
  }

  get userReserves(): Array<string> {
    let value = this.get("userReserves");
    return value.toStringArray();
  }

  set userReserves(value: Array<string>) {
    this.set("userReserves", Value.fromStringArray(value));
  }
}

export class UsageAsCollateral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UsageAsCollateral entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UsageAsCollateral entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UsageAsCollateral", id.toString(), this);
  }

  static load(id: string): UsageAsCollateral | null {
    return store.get("UsageAsCollateral", id) as UsageAsCollateral | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get reserve(): string {
    let value = this.get("reserve");
    return value.toString();
  }

  set reserve(value: string) {
    this.set("reserve", Value.fromString(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    return value.toString();
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }
}

export class SToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SToken", id.toString(), this);
  }

  static load(id: string): SToken | null {
    return store.get("SToken", id) as SToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlyingAssetAddress(): Bytes {
    let value = this.get("underlyingAssetAddress");
    return value.toBytes();
  }

  set underlyingAssetAddress(value: Bytes) {
    this.set("underlyingAssetAddress", Value.fromBytes(value));
  }

  get underlyingAssetDecimals(): i32 {
    let value = this.get("underlyingAssetDecimals");
    return value.toI32();
  }

  set underlyingAssetDecimals(value: i32) {
    this.set("underlyingAssetDecimals", Value.fromI32(value));
  }
}

export class VToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VToken", id.toString(), this);
  }

  static load(id: string): VToken | null {
    return store.get("VToken", id) as VToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get underlyingAssetAddress(): Bytes {
    let value = this.get("underlyingAssetAddress");
    return value.toBytes();
  }

  set underlyingAssetAddress(value: Bytes) {
    this.set("underlyingAssetAddress", Value.fromBytes(value));
  }

  get underlyingAssetDecimals(): i32 {
    let value = this.get("underlyingAssetDecimals");
    return value.toI32();
  }

  set underlyingAssetDecimals(value: i32) {
    this.set("underlyingAssetDecimals", Value.fromI32(value));
  }
}

export class StableTokenDelegatedAllowance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save StableTokenDelegatedAllowance entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save StableTokenDelegatedAllowance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("StableTokenDelegatedAllowance", id.toString(), this);
  }

  static load(id: string): StableTokenDelegatedAllowance | null {
    return store.get(
      "StableTokenDelegatedAllowance",
      id
    ) as StableTokenDelegatedAllowance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromUser(): string {
    let value = this.get("fromUser");
    return value.toString();
  }

  set fromUser(value: string) {
    this.set("fromUser", Value.fromString(value));
  }

  get toUser(): string {
    let value = this.get("toUser");
    return value.toString();
  }

  set toUser(value: string) {
    this.set("toUser", Value.fromString(value));
  }

  get amountAllowed(): BigInt {
    let value = this.get("amountAllowed");
    return value.toBigInt();
  }

  set amountAllowed(value: BigInt) {
    this.set("amountAllowed", Value.fromBigInt(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    return value.toString();
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }
}

export class VariableTokenDelegatedAllowance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save VariableTokenDelegatedAllowance entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VariableTokenDelegatedAllowance entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VariableTokenDelegatedAllowance", id.toString(), this);
  }

  static load(id: string): VariableTokenDelegatedAllowance | null {
    return store.get(
      "VariableTokenDelegatedAllowance",
      id
    ) as VariableTokenDelegatedAllowance | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get fromUser(): string {
    let value = this.get("fromUser");
    return value.toString();
  }

  set fromUser(value: string) {
    this.set("fromUser", Value.fromString(value));
  }

  get toUser(): string {
    let value = this.get("toUser");
    return value.toString();
  }

  set toUser(value: string) {
    this.set("toUser", Value.fromString(value));
  }

  get amountAllowed(): BigInt {
    let value = this.get("amountAllowed");
    return value.toBigInt();
  }

  set amountAllowed(value: BigInt) {
    this.set("amountAllowed", Value.fromBigInt(value));
  }

  get userReserve(): string {
    let value = this.get("userReserve");
    return value.toString();
  }

  set userReserve(value: string) {
    this.set("userReserve", Value.fromString(value));
  }
}
